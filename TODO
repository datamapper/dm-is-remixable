FIXME
=====
- 's' table and Anonymous classes (created when two Classes remix the same Remixable?)

TODO
====
- Many-To-Many :through => Resource
- Test nested remix with M:M through Remixable, :for => Class
- Test with Namespaced Models
- Test remix 'non-remixables' (Could be cool) Author.remix(Book) => author_books

- Look into unary remixes and infinite loops
  User.remix n, Commentable, :for => User (User can comment on another user)

- Harvest Class methods (including it into Remixed Model gets the instance methods, but not class methods...)

- Squash protection;
  IF    ClassA => remix ModuleB, :table_name => "squashme" 
  AND   ClassC => remix ModuleB, :table_name => "squashme" #SQUASHED THAT TABLE
  
- Remixable.related(*remixed_models)
  Taggable.related(Article, JobPostings)


CONSIDERATIONS
==============
- Customizing Assocations           (http://datamapper.org/docs/associations.html)
- Adding Conditions to Associations (http://datamapper.org/docs/associations.html)

- Defining class name specifically during remix (rather than implied from :table_name)
  remix, :class_name => "MyClassName" 
      #instead of using table_name? Too Many Options or having Remixable default class name...

  EXAMPLE:
  User.remix Addressable,
    :table_name => "user_addresses"
    :accessor => "addresses"
    :class_name => "address"
    
- Remixable Module defines class name

  EXAMPLE:
  module Addressable
    is :remixable, 
      :suffix => "address",
      :class_name => "address"
  
  a = Address.new  #Instead of a = UserAddress.new
  User.user_addresses << a
  User.addresses << a
  
  Benefit: On remixing you dont end up with crazy amounts of classes/names UserAddress, AccountAddress, etc
  Problem: How does enhancing work (since all Address's will use same class)
